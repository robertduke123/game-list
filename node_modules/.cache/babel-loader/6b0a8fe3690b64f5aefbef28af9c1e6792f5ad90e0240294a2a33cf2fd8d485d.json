{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\robdu\\\\Desktop\\\\port\\\\game\\\\game-list\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport ParticlesBg from 'particles-bg';\nimport Nav from './components/Nav';\nimport SignIn from './components/SignIn';\nimport Register from './components/Register';\nimport Search from './components/Search';\nimport Main from './components/Main';\nimport Graph from './components/Graph';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'tachyons';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.loadPersonal = data => {\n      fetch('http://localhost:3000/pers', {\n        method: 'put',\n        headers: {\n          'Content-Type': 'application/Json'\n        },\n        body: JSON.stringify({\n          id: data.id\n        })\n      }).then(res => res.json()).then(data => {\n        let obj = Object.assign({}, data);\n        this.setState({\n          personalList: obj\n        });\n      });\n      // console.log(this.state);\n    };\n    this.loadUser = data => {\n      this.setState({\n        user: {\n          id: data.id,\n          name: data.name,\n          email: data.email\n        }\n      });\n      this.setState({\n        log: data.log\n      });\n      this.setState({\n        graphSeg: {\n          started: data.started - 1,\n          finish: data.finish - 1,\n          complete: data.complete - 1\n        }\n      });\n      // console.log(this.state);\n    };\n    this.onRouteChange = (route, isSignedIn) => {\n      this.setState({\n        route: route\n      });\n      this.setState({\n        isSignedIn: isSignedIn\n      });\n    };\n    this.onChange = e => {\n      this.setState({\n        search: e.target.value\n      });\n    };\n    this.onSearch = e => {\n      let item = this.state.search;\n      let itemSearch = this.state.search.replace(/\\s/g, '-').toLocaleLowerCase();\n      fetch('http://localhost:3000/search', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/Json'\n        },\n        body: JSON.stringify({\n          itemSearch: itemSearch\n        })\n      }).then(result => result.json()).then(data => {\n        console.log(data);\n        if (data.slug === itemSearch) {\n          if (!this.state.log.includes(item)) {\n            if (this.state.search.length > 0) {\n              if (this.state.log.length > 0) {\n                this.setState(prevState => ({\n                  log: [...prevState.log, item],\n                  personalList: {\n                    ...prevState.personalList,\n                    [this.state.log.length]: {\n                      name: item,\n                      completion: 'started',\n                      image: data.background_image\n                    }\n                  },\n                  graphSeg: {\n                    started: prevState.graphSeg.started + 1,\n                    finish: prevState.graphSeg.finish,\n                    complete: prevState.graphSeg.complete\n                  },\n                  isThere: true\n                }));\n              } else {\n                this.setState({\n                  log: [item]\n                });\n                this.setState({\n                  personalList: {\n                    0: {\n                      name: item,\n                      completion: 'started',\n                      image: data.background_image\n                    }\n                  }\n                });\n                this.setState({\n                  graphSeg: {\n                    started: 1,\n                    finish: 0,\n                    complete: 0\n                  }\n                });\n                this.setState({\n                  isThere: true\n                });\n              }\n            }\n            this.setState({\n              search: ''\n            });\n            document.querySelector('#search').value = '';\n          }\n        } else {\n          // console.log('n/a please try again');\n          this.setState(prevState => ({\n            ...prevState,\n            isThere: false\n          }));\n        }\n        fetch('http://localhost:3000/entries', {\n          method: 'put',\n          headers: {\n            'Content-Type': 'application/Json'\n          },\n          body: JSON.stringify({\n            id: this.state.user.id,\n            user: this.state.user.name,\n            name: item,\n            image: data.background_image\n          })\n        }).then(res => res.json());\n        // .then(console.log)\n      });\n      // console.log(this.state.personalList);\n\n      // console.log(this.state);\n    };\n    this.onActive = (e, ver) => {\n      let selected = e.target.parentNode.previousSibling.previousSibling.innerText;\n      let newLog = [];\n      this.state.log.forEach(name => {\n        let newName = name.charAt(0).toUpperCase() + name.slice(1);\n        newLog.push(newName);\n      });\n      console.log(newLog);\n      let number = newLog.indexOf(selected);\n      let name = this.state.log[number];\n      let currentStart = this.state.graphSeg.started;\n      let currentFinish = this.state.graphSeg.finish;\n      let currentComplete = this.state.graphSeg.complete;\n      console.log(name, number);\n      if (ver === 'one' && this.state.personalList[number].completion !== 'started') {\n        let newItem = {\n          name: name,\n          completion: 'started'\n        };\n        if (this.state.personalList[number].completion === 'finish') {\n          let newGraph = {\n            started: currentStart + 1,\n            finish: currentFinish - 1,\n            complete: currentComplete\n          };\n          this.setState(prevState => ({\n            personalList: {\n              ...prevState.personalList,\n              [number]: {\n                ...prevState.personalList[number],\n                name: name,\n                completion: newItem.completion\n              }\n            },\n            graphSeg: {\n              started: newGraph.started,\n              finish: newGraph.finish,\n              complete: newGraph.complete\n            }\n          }));\n        } else if (this.state.personalList[number].completion === 'complete') {\n          let newGraph = {\n            started: currentStart + 1,\n            finish: currentFinish,\n            complete: currentComplete - 1\n          };\n          this.setState(prevState => ({\n            personalList: {\n              ...prevState.personalList,\n              [number]: {\n                ...prevState.personalList[number],\n                name: name,\n                completion: newItem.completion\n              }\n            },\n            graphSeg: {\n              started: newGraph.started,\n              finish: newGraph.finish,\n              complete: newGraph.complete\n            }\n          }));\n        }\n        fetch('http://localhost:3000/select', {\n          method: 'put',\n          headers: {\n            'Content-Type': 'application/Json'\n          },\n          body: JSON.stringify({\n            id: this.state.user.id,\n            name: name,\n            completion: newItem.completion\n          })\n        }).then(res => res.json());\n      } else if (ver === 'two' && this.state.personalList[number].completion !== 'finish') {\n        let newItem = {\n          name: name,\n          completion: 'finish'\n        };\n        if (this.state.personalList[number].completion === 'started') {\n          let newGraph = {\n            started: currentStart - 1,\n            finish: currentFinish + 1,\n            complete: currentComplete\n          };\n          this.setState(prevState => ({\n            personalList: {\n              ...prevState.personalList,\n              [number]: {\n                ...prevState.personalList[number],\n                name: name,\n                completion: newItem.completion\n              }\n            },\n            graphSeg: {\n              started: newGraph.started,\n              finish: newGraph.finish,\n              complete: newGraph.complete\n            }\n          }));\n        } else if (this.state.personalList[number].completion === 'complete') {\n          let newGraph = {\n            started: currentStart,\n            finish: currentFinish + 1,\n            complete: currentComplete - 1\n          };\n          this.setState(prevState => ({\n            personalList: {\n              ...prevState.personalList,\n              [number]: {\n                ...prevState.personalList[number],\n                name: name,\n                completion: newItem.completion\n              }\n            },\n            graphSeg: {\n              started: newGraph.started,\n              finish: newGraph.finish,\n              complete: newGraph.complete\n            }\n          }));\n        }\n        fetch('http://localhost:3000/select', {\n          method: 'put',\n          headers: {\n            'Content-Type': 'application/Json'\n          },\n          body: JSON.stringify({\n            id: this.state.user.id,\n            name: name,\n            completion: newItem.completion\n          })\n        }).then(res => res.json());\n      } else if (ver === 'three' && this.state.personalList[number].completion !== 'complete') {\n        let newItem = {\n          name: name,\n          completion: 'complete'\n        };\n        if (this.state.personalList[number].completion === 'started') {\n          let newGraph = {\n            started: currentStart - 1,\n            finish: currentFinish,\n            complete: currentComplete + 1\n          };\n          this.setState(prevState => ({\n            personalList: {\n              ...prevState.personalList,\n              [number]: {\n                ...prevState.personalList[number],\n                name: name,\n                completion: newItem.completion\n              }\n            },\n            graphSeg: {\n              started: newGraph.started,\n              finish: newGraph.finish,\n              complete: newGraph.complete\n            }\n          }));\n        } else if (this.state.personalList[number].completion === 'finish') {\n          let newGraph = {\n            started: currentStart,\n            finish: currentFinish - 1,\n            complete: currentComplete + 1\n          };\n          this.setState(prevState => ({\n            personalList: {\n              ...prevState.personalList,\n              [number]: {\n                ...prevState.personalList[number],\n                name: name,\n                completion: newItem.completion\n              }\n            },\n            graphSeg: {\n              started: newGraph.started,\n              finish: newGraph.finish,\n              complete: newGraph.complete\n            }\n          }));\n        }\n        fetch('http://localhost:3000/select', {\n          method: 'put',\n          headers: {\n            'Content-Type': 'application/Json'\n          },\n          body: JSON.stringify({\n            id: this.state.user.id,\n            name: name,\n            completion: newItem.completion\n          })\n        }).then(res => res.json());\n      }\n      // console.log(this.state)  \n    };\n    this.itemDelete = e => {\n      let item = e.target.previousSibling.innerHTML;\n      let log = this.state.log;\n      let newLog = [];\n      log.forEach(name => {\n        let newName = name.charAt(0).toUpperCase() + name.slice(1);\n        newLog.push(newName);\n      });\n      let index = newLog.indexOf(item);\n      let name = log[index];\n      let pers = this.state.personalList;\n      let select = pers[index].completion;\n      fetch('http://localhost:3000/log_delete', {\n        method: 'put',\n        headers: {\n          'Content-Type': 'application/Json'\n        },\n        body: JSON.stringify({\n          id: this.state.user.id,\n          name: name,\n          select: select\n        })\n      }).then(res => res.json());\n      fetch('http://localhost:3000/pers_delete', {\n        method: 'delete',\n        headers: {\n          'Content-Type': 'application/Json'\n        },\n        body: JSON.stringify({\n          id: this.state.user.id,\n          name: name\n        })\n      }).then(res => res.json());\n      log.splice(log.indexOf(name), 1);\n      delete pers[index];\n      let newPers = {};\n      let count = 0;\n      log.forEach(item => {\n        newPers[count] = {};\n        count++;\n      });\n      count = 0;\n      Object.keys(pers).forEach(item => {\n        newPers[count] = pers[item];\n        count++;\n      });\n      this.setState({\n        log: log\n      });\n      this.setState({\n        personalList: newPers\n      });\n      this.setState(prevState => ({\n        graphSeg: {\n          ...prevState.graphSeg,\n          [select]: prevState.graphSeg[select] - 1\n        }\n      }));\n    };\n    this.state = {\n      authorization: '',\n      search: '',\n      log: [],\n      personalList: {},\n      graphSeg: {\n        started: 0,\n        finish: 0,\n        complete: 0\n      },\n      isThere: true,\n      route: 'signin',\n      isSignedIn: false,\n      user: {\n        id: '',\n        name: '',\n        email: '',\n        password: ''\n      }\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(ParticlesBg, {\n        id: \"bg\",\n        type: \"cobweb\",\n        color: \"#ffffff\",\n        bg: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(Nav, {\n        signedIn: this.state.isSignedIn,\n        onRouteChange: this.onRouteChange,\n        user: this.state.user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 8\n      }, this), this.state.route === 'signin' ? /*#__PURE__*/_jsxDEV(SignIn, {\n        loadUser: this.loadUser,\n        loadPersonal: this.loadPersonal,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 11\n      }, this) : this.state.route === 'register' ? /*#__PURE__*/_jsxDEV(Register, {\n        loadUser: this.loadUser,\n        loadPersonal: this.loadPersonal,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left-cont\",\n          children: [/*#__PURE__*/_jsxDEV(Search, {\n            onChange: this.onChange,\n            onSearch: this.onSearch,\n            isThere: this.state.isThere\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Main, {\n            pers: this.state.personalList,\n            onActive: this.onActive,\n            log: this.state.log,\n            itemDelete: this.itemDelete\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Graph, {\n          graphSeg: this.state.graphSeg,\n          log: this.state.log\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","ParticlesBg","Nav","SignIn","Register","Search","Main","Graph","jsxDEV","_jsxDEV","App","constructor","loadPersonal","data","fetch","method","headers","body","JSON","stringify","id","then","res","json","obj","Object","assign","setState","personalList","loadUser","user","name","email","log","graphSeg","started","finish","complete","onRouteChange","route","isSignedIn","onChange","e","search","target","value","onSearch","item","state","itemSearch","replace","toLocaleLowerCase","result","console","slug","includes","length","prevState","completion","image","background_image","isThere","document","querySelector","onActive","ver","selected","parentNode","previousSibling","innerText","newLog","forEach","newName","charAt","toUpperCase","slice","push","number","indexOf","currentStart","currentFinish","currentComplete","newItem","newGraph","itemDelete","innerHTML","index","pers","select","splice","newPers","count","keys","authorization","password","render","className","children","type","color","bg","fileName","_jsxFileName","lineNumber","columnNumber","signedIn"],"sources":["C:/Users/robdu/Desktop/port/game/game-list/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport ParticlesBg from 'particles-bg'\nimport Nav from './components/Nav';\nimport SignIn from './components/SignIn';\nimport Register from './components/Register';\nimport Search from './components/Search';\nimport Main from './components/Main';\nimport Graph from './components/Graph';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'tachyons'\nimport './App.css';\n\n\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = { \n    authorization: '',\n    search: '',\n    log: [],\n    personalList: {},\n    graphSeg:{\n      started: 0,\n      finish: 0,\n      complete: 0\n    },\n    isThere: true,\n    route: 'signin',\n    isSignedIn: false,\n    user: {\n      id: '',\n      name: '',\n      email: '',\n      password: ''\n    }\n   } \n  }\n\n  loadPersonal = (data) => {\n    fetch('http://localhost:3000/pers', {\n                method: 'put',\n                headers: {'Content-Type': 'application/Json'},\n                body: JSON.stringify({\n                    id: data.id,\n                })\n            })\n            .then(res => res.json())\n            .then(data => {\n              let obj = Object.assign({}, data)\n              this.setState({personalList : obj})\n            })\n            // console.log(this.state);\n  }\n\n  loadUser = (data) => {\n    this.setState({user: {\n      id: data.id,\n      name: data.name,\n      email: data.email,\n    }})\n    this.setState({log: data.log})\n    this.setState({graphSeg: {\n      started: (data.started) - 1,\n      finish: (data.finish) - 1,\n      complete: (data.complete) - 1\n    }})\n    // console.log(this.state);\n  }\n\n\n\n  onRouteChange = (route, isSignedIn) => {\n    this.setState({route: route})\n    this.setState({isSignedIn: isSignedIn})\n  }\n\n   onChange = (e) => {\n    this.setState({search: e.target.value})\n   }\n\n   onSearch = (e) => {\n      let item = this.state.search\n      let itemSearch = this.state.search.replace(/\\s/g, '-').toLocaleLowerCase()\n\n        fetch('http://localhost:3000/search', {\n          method: 'PUT',\n          headers: {'Content-Type': 'application/Json'},\n          body: JSON.stringify({\n            itemSearch: itemSearch\n          })\n        })\n            .then(result => result.json())\n            .then(data => {\n              console.log(data);\n               if(data.slug === itemSearch) {\n              if( !this.state.log.includes(item)) {\n                if(this.state.search.length > 0) {\n                  if(this.state.log.length > 0) {\n                    this.setState(prevState => ({\n                      log: [...prevState.log, item],\n                      personalList: {...prevState.personalList,\n                       [this.state.log.length] : {\n                          name: item, \n                          completion: 'started',\n                          image: data.background_image\n                        }},\n                      graphSeg:{\n                        started: prevState.graphSeg.started + 1,\n                        finish: prevState.graphSeg.finish,\n                        complete: prevState.graphSeg.complete\n                      },\n                      isThere: true\n                    }))\n                  } else {\n                    this.setState({log: [item]})\n                    this.setState({personalList: { \n                      0 :{\n                      name: item, \n                      completion: 'started',\n                      image: data.background_image\n                      }\n                  }})\n                    this.setState({graphSeg:{\n                        started: 1,\n                        finish: 0,\n                        complete: 0\n                      }})\n                    this.setState({isThere: true})                \n                }      \n              }                \n              this.setState({search: ''})\n              document.querySelector('#search').value = ''      \n            } \n            } else {\n              // console.log('n/a please try again');\n              this.setState(prevState => ({\n                ...prevState,\n                isThere: false\n              }))\n            }\n            fetch('http://localhost:3000/entries', {\n                method: 'put',\n                headers: {'Content-Type': 'application/Json'},\n                body: JSON.stringify({\n                    id: this.state.user.id,\n                    user: this.state.user.name,\n                    name: item,\n                    image: data.background_image\n                })\n            })\n            .then(res => res.json())\n            // .then(console.log)\n          })\n          // console.log(this.state.personalList);\n           \n          \n        // console.log(this.state);\n    }\n    \n  \n    onActive = (e, ver) => {\n    let selected = e.target.parentNode.previousSibling.previousSibling.innerText\n\n    let newLog = []\n    this.state.log.forEach(name => { let newName = name.charAt(0).toUpperCase() + name.slice(1)\n      newLog.push(newName)});\n      console.log(newLog);\n\n    let number = newLog.indexOf(selected)\n    let name = this.state.log[number]\n    let currentStart = this.state.graphSeg.started\n    let currentFinish = this.state.graphSeg.finish\n    let currentComplete = this.state.graphSeg.complete    \n\n    console.log(name, number);\n    \n    if(ver === 'one' && this.state.personalList[number].completion !== 'started') { \n      let newItem = {name: name,\n        completion: 'started'} \n      if(this.state.personalList[number].completion === 'finish') {\n        let newGraph = {\n           started: currentStart + 1,\n           finish: currentFinish - 1,\n           complete: currentComplete\n          }               \n        this.setState(prevState => ({\n        personalList : {\n          ...prevState.personalList,\n          [number] : {\n            ...prevState.personalList[number],\n            name: name,\n            completion: newItem.completion,\n            \n          }        \n        },\n        graphSeg: {\n            started: newGraph.started,\n            finish: newGraph.finish,\n            complete: newGraph.complete\n          }\n      }))\n    } else if(this.state.personalList[number].completion === 'complete') {\n        let newGraph = {\n           started: currentStart + 1,\n           finish: currentFinish,\n           complete: currentComplete - 1\n          }               \n        this.setState(prevState => ({\n        personalList : {\n          ...prevState.personalList,\n          [number] : {\n            ...prevState.personalList[number],\n            name: name,\n            completion: newItem.completion,\n            \n          }        \n        },\n        graphSeg: {\n            started: newGraph.started,\n            finish: newGraph.finish,\n            complete: newGraph.complete\n          }\n      }))\n    }      \n    fetch('http://localhost:3000/select', {\n          method: 'put',\n          headers: {'Content-Type': 'application/Json'},\n          body: JSON.stringify({\n              id: this.state.user.id,\n              name: name,\n              completion: newItem.completion\n          })\n      })\n      .then(res => res.json())   \n  \n    } else if (ver === 'two' && this.state.personalList[number].completion !== 'finish') {      \n      let newItem = {name: name,\n        completion: 'finish'} \n      if(this.state.personalList[number].completion === 'started') {\n        let newGraph = {\n           started: currentStart - 1,\n           finish: currentFinish + 1,\n           complete: currentComplete\n          }               \n        this.setState(prevState => ({\n        personalList : {\n          ...prevState.personalList,\n          [number] : {\n            ...prevState.personalList[number],\n            name: name,\n            completion: newItem.completion,\n            \n          }        \n        },\n        graphSeg: {\n            started: newGraph.started,\n            finish: newGraph.finish,\n            complete: newGraph.complete\n          }\n      }))\n    } else if(this.state.personalList[number].completion === 'complete') {\n        let newGraph = {\n           started: currentStart,\n           finish: currentFinish + 1,\n           complete: currentComplete - 1\n          }               \n        this.setState(prevState => ({\n        personalList : {\n          ...prevState.personalList,\n          [number] : {\n            ...prevState.personalList[number],\n            name: name,\n            completion: newItem.completion,\n            \n          }        \n        },\n        graphSeg: {\n            started: newGraph.started,\n            finish: newGraph.finish,\n            complete: newGraph.complete\n          }\n      }))\n    }  \n    fetch('http://localhost:3000/select', {\n            method: 'put',\n            headers: {'Content-Type': 'application/Json'},\n            body: JSON.stringify({\n                id: this.state.user.id,\n                name: name,\n                completion: newItem.completion\n            })\n        })\n        .then(res => res.json())\n    } else if (ver === 'three' && this.state.personalList[number].completion !== 'complete') {        \n      let newItem = {name: name,\n        completion: 'complete'} \n      if(this.state.personalList[number].completion === 'started') {\n        let newGraph = {\n           started: currentStart - 1,\n           finish: currentFinish,\n           complete: currentComplete + 1\n          }               \n        this.setState(prevState => ({\n        personalList : {\n          ...prevState.personalList,\n          [number] : {\n            ...prevState.personalList[number],\n            name: name,\n            completion: newItem.completion,\n            \n          }        \n        },\n        graphSeg: {\n            started: newGraph.started,\n            finish: newGraph.finish,\n            complete: newGraph.complete\n          }\n      }))\n    } else if(this.state.personalList[number].completion === 'finish') {\n        let newGraph = {\n           started: currentStart,\n           finish: currentFinish - 1,\n           complete: currentComplete + 1\n          }               \n        this.setState(prevState => ({\n        personalList : {\n          ...prevState.personalList,\n          [number] : {\n            ...prevState.personalList[number],\n            name: name,\n            completion: newItem.completion,\n            \n          }        \n        },\n        graphSeg: {\n            started: newGraph.started,\n            finish: newGraph.finish,\n            complete: newGraph.complete\n          }\n      }))\n    }  \n    fetch('http://localhost:3000/select', {\n            method: 'put',\n            headers: {'Content-Type': 'application/Json'},\n            body: JSON.stringify({\n                id: this.state.user.id,\n                name: name,\n                completion: newItem.completion\n            })\n        })\n        .then(res => res.json())\n    }    \n    // console.log(this.state)  \n  }\n  \n  itemDelete = (e) => {\n    let item = e.target.previousSibling.innerHTML\n    let log = this.state.log \n    let newLog = []\n    log.forEach(name => { let newName = name.charAt(0).toUpperCase() + name.slice(1)\n      newLog.push(newName)});\n    let index = newLog.indexOf(item)\n    let name = log[index]\n    let pers = this.state.personalList\n    let select = pers[index].completion\n\n    fetch('http://localhost:3000/log_delete', {\n      method: 'put',\n            headers: {'Content-Type': 'application/Json'},\n            body: JSON.stringify({\n                id: this.state.user.id,\n                name: name,\n                select: select\n            })\n      })\n      .then(res => res.json())\n\n      fetch('http://localhost:3000/pers_delete', {\n      method: 'delete',\n            headers: {'Content-Type': 'application/Json'},\n            body: JSON.stringify({\n                id: this.state.user.id,\n                name: name\n            })\n      })\n      .then(res => res.json())\n\n    log.splice(log.indexOf(name), 1)\n    delete pers[index]\n    let newPers = {}\n    let count = 0\n    log.forEach(item => {\n      newPers[count] = {}\n      count++\n    })\n    count = 0\n    Object.keys(pers).forEach(item => {\n      newPers[count] = pers[item]\n      count++\n    })\n\n   this.setState({log: log})\n   this.setState({personalList: newPers})\n   this.setState(prevState => ({\n    graphSeg: {\n      ...prevState.graphSeg,\n      [select]: prevState.graphSeg[select] - 1\n    } \n   }))\n  }\n\n  render() { \n    return (\n      <div className='container'>\n       <ParticlesBg  id='bg' type=\"cobweb\" color='#ffffff' bg={true}/>\n       <Nav signedIn={this.state.isSignedIn} onRouteChange={this.onRouteChange} user={this.state.user}/>\n       {this.state.route === 'signin' ? \n          <SignIn loadUser={this.loadUser} loadPersonal={this.loadPersonal} onRouteChange={this.onRouteChange}/> :\n          this.state.route === 'register' ?\n          <Register loadUser={this.loadUser} loadPersonal={this.loadPersonal} onRouteChange={this.onRouteChange}/> :  \n          <div className='App'>         \n            <div className='left-cont'>\n              <Search onChange={this.onChange} onSearch={this.onSearch}  isThere={this.state.isThere}/>\n              <Main pers={this.state.personalList} onActive={this.onActive} log={this.state.log} itemDelete={this.itemDelete}/>\n            </div>          \n              <Graph graphSeg={this.state.graphSeg} log={this.state.log}/>              \n          </div>\n       }\n        \n      </div>\n      \n\n    );\n  }\n}\n \nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}