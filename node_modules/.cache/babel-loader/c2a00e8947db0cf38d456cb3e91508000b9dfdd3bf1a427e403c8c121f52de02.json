{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\robdu\\\\Desktop\\\\port\\\\game\\\\game-list\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport ParticlesBg from 'particles-bg';\nimport Nav from './components/Nav';\nimport SignIn from './components/SignIn';\nimport Register from './components/Register';\nimport Search from './components/Search';\nimport Main from './components/Main';\nimport Graph from './components/Graph';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'tachyons';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.loadPersonal = data => {\n      fetch('http://localhost:3000/pers', {\n        method: 'put',\n        headers: {\n          'Content-Type': 'application/Json'\n        },\n        body: JSON.stringify({\n          id: data.id\n        })\n      }).then(res => res.json()).then(data => {\n        let obj = Object.assign({}, data);\n        this.setState({\n          personalList: obj\n        });\n      });\n      // console.log(this.state);\n    };\n    this.loadUser = data => {\n      this.setState({\n        user: {\n          id: data.id,\n          name: data.name,\n          email: data.email,\n          password: data.password\n        }\n      });\n      this.setState({\n        log: data.log\n      });\n      this.setState({\n        graphSeg: {\n          started: data.started - 1,\n          finish: data.finish - 1,\n          complete: data.complete - 1\n        }\n      });\n      // console.log(this.state);\n    };\n    this.onRouteChange = (route, isSignedIn) => {\n      this.setState({\n        route: route\n      });\n      this.setState({\n        isSignedIn: isSignedIn\n      });\n    };\n    this.onChange = e => {\n      this.setState({\n        search: e.target.value\n      });\n    };\n    this.onSearch = e => {\n      let item = this.state.search;\n      let itemSearch = this.state.search.replace(/\\s/g, '-').toLocaleLowerCase();\n      fetch(`https://rawg-video-games-database.p.rapidapi.com/games/${itemSearch}?key=a8d817fa172443748735ff2d10862681`, {\n        method: 'GET',\n        headers: {\n          'X-RapidAPI-Key': '48bcd47c97msh29aeb9d40c8bed9p1b117bjsn539a69073325',\n          'X-RapidAPI-Host': 'rawg-video-games-database.p.rapidapi.com'\n        }\n      }).then(result => result.json()).then(data => {\n        if (data.slug === itemSearch) {\n          if (!this.state.log.includes(item)) {\n            if (this.state.search.length > 0) {\n              if (this.state.log.length > 0) {\n                this.setState(prevState => ({\n                  log: [...prevState.log, item],\n                  personalList: {\n                    ...prevState.personalList,\n                    [this.state.log.length]: {\n                      name: item,\n                      completion: 'started',\n                      image: data.background_image\n                    }\n                  },\n                  graphSeg: {\n                    started: prevState.graphSeg.started + 1,\n                    finish: prevState.graphSeg.finish,\n                    complete: prevState.graphSeg.complete\n                  },\n                  isThere: true\n                }));\n              } else {\n                this.setState({\n                  log: [item]\n                });\n                this.setState({\n                  personalList: {\n                    [0]: {\n                      name: item,\n                      completion: 'started',\n                      image: data.background_image\n                    }\n                  }\n                });\n                this.setState({\n                  graphSeg: {\n                    started: 1,\n                    finish: 0,\n                    complete: 0\n                  }\n                });\n                this.setState({\n                  isThere: true\n                });\n              }\n            }\n            this.setState({\n              search: ''\n            });\n            document.querySelector('#search').value = '';\n          }\n        } else {\n          // console.log('n/a please try again');\n          this.setState(prevState => ({\n            ...prevState,\n            isThere: false\n          }));\n        }\n        fetch('http://localhost:3000/entries', {\n          method: 'put',\n          headers: {\n            'Content-Type': 'application/Json'\n          },\n          body: JSON.stringify({\n            id: this.state.user.id,\n            user: this.state.user.name,\n            name: item,\n            image: data.background_image\n          })\n        }).then(res => res.json());\n        // .then(console.log)\n      });\n      // console.log(this.state.personalList);\n\n      // console.log(this.state);\n    };\n    this.onActive = (e, ver) => {\n      let name = e.target.parentNode.previousSibling.previousSibling.innerText;\n      let newLog = [];\n      this.state.log.forEach(name => {\n        let newName = name.charAt(0).toUpperCase() + name.slice(1);\n        newLog.push(newName);\n      });\n      console.log(newLog);\n      let number = newLog.indexOf(name);\n      let currentStart = this.state.graphSeg.started;\n      let currentFinish = this.state.graphSeg.finish;\n      let currentComplete = this.state.graphSeg.complete;\n      console.log(name, number);\n      if (ver === 'one' && this.state.personalList[number].completion !== 'started') {\n        let newItem = {\n          name: name,\n          completion: 'started'\n        };\n        if (this.state.personalList[number].completion === 'finish') {\n          let newGraph = {\n            started: currentStart + 1,\n            finish: currentFinish - 1,\n            complete: currentComplete\n          };\n          this.setState(prevState => ({\n            personalList: {\n              ...prevState.personalList,\n              [number]: {\n                ...prevState.personalList[number],\n                name: name,\n                completion: newItem.completion\n              }\n            },\n            graphSeg: {\n              started: newGraph.started,\n              finish: newGraph.finish,\n              complete: newGraph.complete\n            }\n          }));\n        } else if (this.state.personalList[number].completion === 'complete') {\n          let newGraph = {\n            started: currentStart + 1,\n            finish: currentFinish,\n            complete: currentComplete - 1\n          };\n          this.setState(prevState => ({\n            personalList: {\n              ...prevState.personalList,\n              [number]: {\n                ...prevState.personalList[number],\n                name: name,\n                completion: newItem.completion\n              }\n            },\n            graphSeg: {\n              started: newGraph.started,\n              finish: newGraph.finish,\n              complete: newGraph.complete\n            }\n          }));\n        }\n        fetch('http://localhost:3000/select', {\n          method: 'put',\n          headers: {\n            'Content-Type': 'application/Json'\n          },\n          body: JSON.stringify({\n            id: this.state.user.id,\n            name: name,\n            completion: newItem.completion\n          })\n        }).then(res => res.json());\n      } else if (ver === 'two' && this.state.personalList[number].completion !== 'finish') {\n        let newItem = {\n          name: name,\n          completion: 'finish'\n        };\n        if (this.state.personalList[number].completion === 'started') {\n          let newGraph = {\n            started: currentStart - 1,\n            finish: currentFinish + 1,\n            complete: currentComplete\n          };\n          this.setState(prevState => ({\n            personalList: {\n              ...prevState.personalList,\n              [number]: {\n                ...prevState.personalList[number],\n                name: name,\n                completion: newItem.completion\n              }\n            },\n            graphSeg: {\n              started: newGraph.started,\n              finish: newGraph.finish,\n              complete: newGraph.complete\n            }\n          }));\n        } else if (this.state.personalList[number].completion === 'complete') {\n          let newGraph = {\n            started: currentStart,\n            finish: currentFinish + 1,\n            complete: currentComplete - 1\n          };\n          this.setState(prevState => ({\n            personalList: {\n              ...prevState.personalList,\n              [number]: {\n                ...prevState.personalList[number],\n                name: name,\n                completion: newItem.completion\n              }\n            },\n            graphSeg: {\n              started: newGraph.started,\n              finish: newGraph.finish,\n              complete: newGraph.complete\n            }\n          }));\n        }\n        fetch('http://localhost:3000/select', {\n          method: 'put',\n          headers: {\n            'Content-Type': 'application/Json'\n          },\n          body: JSON.stringify({\n            id: this.state.user.id,\n            name: name,\n            completion: newItem.completion\n          })\n        }).then(res => res.json());\n      } else if (ver === 'three' && this.state.personalList[number].completion !== 'complete') {\n        let newItem = {\n          name: name,\n          completion: 'complete'\n        };\n        if (this.state.personalList[number].completion === 'started') {\n          let newGraph = {\n            started: currentStart - 1,\n            finish: currentFinish,\n            complete: currentComplete + 1\n          };\n          this.setState(prevState => ({\n            personalList: {\n              ...prevState.personalList,\n              [number]: {\n                ...prevState.personalList[number],\n                name: name,\n                completion: newItem.completion\n              }\n            },\n            graphSeg: {\n              started: newGraph.started,\n              finish: newGraph.finish,\n              complete: newGraph.complete\n            }\n          }));\n        } else if (this.state.personalList[number].completion === 'finish') {\n          let newGraph = {\n            started: currentStart,\n            finish: currentFinish - 1,\n            complete: currentComplete + 1\n          };\n          this.setState(prevState => ({\n            personalList: {\n              ...prevState.personalList,\n              [number]: {\n                ...prevState.personalList[number],\n                name: name,\n                completion: newItem.completion\n              }\n            },\n            graphSeg: {\n              started: newGraph.started,\n              finish: newGraph.finish,\n              complete: newGraph.complete\n            }\n          }));\n        }\n        fetch('http://localhost:3000/select', {\n          method: 'put',\n          headers: {\n            'Content-Type': 'application/Json'\n          },\n          body: JSON.stringify({\n            id: this.state.user.id,\n            name: name,\n            completion: newItem.completion\n          })\n        }).then(res => res.json());\n      }\n      // console.log(this.state)  \n    };\n    this.itemDelete = e => {\n      let item = e.target.previousSibling.innerHTML;\n      let log = this.state.log;\n      let pers = this.state.personalList;\n      let index = log.indexOf(item);\n      fetch('http://localhost:3000/log_delete', {\n        method: 'put',\n        headers: {\n          'Content-Type': 'application/Json'\n        },\n        body: JSON.stringify({\n          id: this.state.user.id,\n          name: item\n        })\n      }).then(res => res.json());\n      fetch('http://localhost:3000/pers_delete', {\n        method: 'delete',\n        headers: {\n          'Content-Type': 'application/Json'\n        },\n        body: JSON.stringify({\n          id: this.state.user.id,\n          name: item\n        })\n      }).then(res => res.json());\n      log.splice(log.indexOf(item), 1);\n      delete pers[index];\n      let newPers = {};\n      let count = 0;\n      log.forEach(item => {\n        newPers[count] = {};\n        count++;\n      });\n      count = 0;\n      Object.keys(pers).forEach(item => {\n        newPers[count] = pers[item];\n        count++;\n      });\n      this.setState({\n        log: log\n      });\n      this.setState({\n        personalList: newPers\n      });\n      console.log(this.state.log, this.state.personalList);\n    };\n    this.state = {\n      authorization: '',\n      search: '',\n      log: [],\n      personalList: {},\n      graphSeg: {\n        started: 0,\n        finish: 0,\n        complete: 0\n      },\n      isThere: true,\n      route: 'signin',\n      isSignedIn: false,\n      user: {\n        id: '',\n        name: '',\n        email: '',\n        password: ''\n      }\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(ParticlesBg, {\n        id: \"bg\",\n        type: \"cobweb\",\n        color: \"#ffffff\",\n        bg: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(Nav, {\n        signedIn: this.state.isSignedIn,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 8\n      }, this), this.state.route === 'home' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left-cont\",\n          children: [/*#__PURE__*/_jsxDEV(Search, {\n            onChange: this.onChange,\n            onSearch: this.onSearch,\n            isThere: this.state.isThere\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Main, {\n            pers: this.state.personalList,\n            onActive: this.onActive,\n            log: this.state.log,\n            itemDelete: this.itemDelete\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Graph, {\n          graphSeg: this.state.graphSeg,\n          log: this.state.log\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 11\n      }, this) : this.state.route === 'signin' ? /*#__PURE__*/_jsxDEV(SignIn, {\n        loadUser: this.loadUser,\n        loadPersonal: this.loadPersonal,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Register, {\n        loadUser: this.loadUser,\n        loadPersonal: this.loadPersonal,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","ParticlesBg","Nav","SignIn","Register","Search","Main","Graph","jsxDEV","_jsxDEV","App","constructor","loadPersonal","data","fetch","method","headers","body","JSON","stringify","id","then","res","json","obj","Object","assign","setState","personalList","loadUser","user","name","email","password","log","graphSeg","started","finish","complete","onRouteChange","route","isSignedIn","onChange","e","search","target","value","onSearch","item","state","itemSearch","replace","toLocaleLowerCase","result","slug","includes","length","prevState","completion","image","background_image","isThere","document","querySelector","onActive","ver","parentNode","previousSibling","innerText","newLog","forEach","newName","charAt","toUpperCase","slice","push","console","number","indexOf","currentStart","currentFinish","currentComplete","newItem","newGraph","itemDelete","innerHTML","pers","index","splice","newPers","count","keys","authorization","render","className","children","type","color","bg","fileName","_jsxFileName","lineNumber","columnNumber","signedIn"],"sources":["C:/Users/robdu/Desktop/port/game/game-list/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport ParticlesBg from 'particles-bg'\nimport Nav from './components/Nav';\nimport SignIn from './components/SignIn';\nimport Register from './components/Register';\nimport Search from './components/Search';\nimport Main from './components/Main';\nimport Graph from './components/Graph';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'tachyons'\nimport './App.css';\n\n\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = { \n    authorization: '',\n    search: '',\n    log: [],\n    personalList: {},\n    graphSeg:{\n      started: 0,\n      finish: 0,\n      complete: 0\n    },\n    isThere: true,\n    route: 'signin',\n    isSignedIn: false,\n    user: {\n      id: '',\n      name: '',\n      email: '',\n      password: ''\n    }\n   } \n  }\n\n  loadPersonal = (data) => {\n    fetch('http://localhost:3000/pers', {\n                method: 'put',\n                headers: {'Content-Type': 'application/Json'},\n                body: JSON.stringify({\n                    id: data.id,\n                })\n            })\n            .then(res => res.json())\n            .then(data => {\n              let obj = Object.assign({}, data)\n              this.setState({personalList : obj})\n            })\n            // console.log(this.state);\n  }\n\n  loadUser = (data) => {\n    this.setState({user: {\n      id: data.id,\n      name: data.name,\n      email: data.email,\n      password: data.password,\n    }})\n    this.setState({log: data.log})\n    this.setState({graphSeg: {\n      started: (data.started) - 1,\n      finish: (data.finish) - 1,\n      complete: (data.complete) - 1\n    }})\n    // console.log(this.state);\n  }\n\n\n\n  onRouteChange = (route, isSignedIn) => {\n    this.setState({route: route})\n    this.setState({isSignedIn: isSignedIn})\n  }\n\n   onChange = (e) => {\n    this.setState({search: e.target.value})\n   }\n\n   onSearch = (e) => {\n      let item = this.state.search\n      let itemSearch = this.state.search.replace(/\\s/g, '-').toLocaleLowerCase()\n\n        fetch(`https://rawg-video-games-database.p.rapidapi.com/games/${itemSearch}?key=a8d817fa172443748735ff2d10862681`, {\n          method: 'GET',\n          headers: {\n            'X-RapidAPI-Key': '48bcd47c97msh29aeb9d40c8bed9p1b117bjsn539a69073325',\n            'X-RapidAPI-Host': 'rawg-video-games-database.p.rapidapi.com'            \n            }\n            })\n            .then(result => result.json())\n            .then(data => {\n               if(data.slug === itemSearch) {\n              if( !this.state.log.includes(item)) {\n                if(this.state.search.length > 0) {\n                  if(this.state.log.length > 0) {\n                    this.setState(prevState => ({\n                      log: [...prevState.log, item],\n                      personalList: {...prevState.personalList,\n                       [this.state.log.length] : {\n                          name: item, \n                          completion: 'started',\n                          image: data.background_image\n                        }},\n                      graphSeg:{\n                        started: prevState.graphSeg.started + 1,\n                        finish: prevState.graphSeg.finish,\n                        complete: prevState.graphSeg.complete\n                      },\n                      isThere: true\n                    }))\n                  } else {\n                    this.setState({log: [item]})\n                    this.setState({personalList: { \n                      [0] :{\n                      name: item, \n                      completion: 'started',\n                      image: data.background_image\n                      }\n                  }})\n                    this.setState({graphSeg:{\n                        started: 1,\n                        finish: 0,\n                        complete: 0\n                      }})\n                    this.setState({isThere: true})                \n                }      \n              }                \n              this.setState({search: ''})\n              document.querySelector('#search').value = ''      \n            } \n            } else {\n              // console.log('n/a please try again');\n              this.setState(prevState => ({\n                ...prevState,\n                isThere: false\n              }))\n            }\n            fetch('http://localhost:3000/entries', {\n                method: 'put',\n                headers: {'Content-Type': 'application/Json'},\n                body: JSON.stringify({\n                    id: this.state.user.id,\n                    user: this.state.user.name,\n                    name: item,\n                    image: data.background_image\n                })\n            })\n            .then(res => res.json())\n            // .then(console.log)\n          })\n          // console.log(this.state.personalList);\n           \n          \n        // console.log(this.state);\n    }\n    \n  \n    onActive = (e, ver) => {\n    let name = e.target.parentNode.previousSibling.previousSibling.innerText\n\n    let newLog = []\n    this.state.log.forEach(name => { let newName = name.charAt(0).toUpperCase() + name.slice(1)\n      newLog.push(newName)});\n      console.log(newLog);\n\n    let number = newLog.indexOf(name)\n    let currentStart = this.state.graphSeg.started\n    let currentFinish = this.state.graphSeg.finish\n    let currentComplete = this.state.graphSeg.complete    \n\n    console.log(name, number);\n    \n    if(ver === 'one' && this.state.personalList[number].completion !== 'started') { \n      let newItem = {name: name,\n        completion: 'started'} \n      if(this.state.personalList[number].completion === 'finish') {\n        let newGraph = {\n           started: currentStart + 1,\n           finish: currentFinish - 1,\n           complete: currentComplete\n          }               \n        this.setState(prevState => ({\n        personalList : {\n          ...prevState.personalList,\n          [number] : {\n            ...prevState.personalList[number],\n            name: name,\n            completion: newItem.completion,\n            \n          }        \n        },\n        graphSeg: {\n            started: newGraph.started,\n            finish: newGraph.finish,\n            complete: newGraph.complete\n          }\n      }))\n    } else if(this.state.personalList[number].completion === 'complete') {\n        let newGraph = {\n           started: currentStart + 1,\n           finish: currentFinish,\n           complete: currentComplete - 1\n          }               \n        this.setState(prevState => ({\n        personalList : {\n          ...prevState.personalList,\n          [number] : {\n            ...prevState.personalList[number],\n            name: name,\n            completion: newItem.completion,\n            \n          }        \n        },\n        graphSeg: {\n            started: newGraph.started,\n            finish: newGraph.finish,\n            complete: newGraph.complete\n          }\n      }))\n    }      \n    fetch('http://localhost:3000/select', {\n          method: 'put',\n          headers: {'Content-Type': 'application/Json'},\n          body: JSON.stringify({\n              id: this.state.user.id,\n              name: name,\n              completion: newItem.completion\n          })\n      })\n      .then(res => res.json())   \n  \n    } else if (ver === 'two' && this.state.personalList[number].completion !== 'finish') {      \n      let newItem = {name: name,\n        completion: 'finish'} \n      if(this.state.personalList[number].completion === 'started') {\n        let newGraph = {\n           started: currentStart - 1,\n           finish: currentFinish + 1,\n           complete: currentComplete\n          }               \n        this.setState(prevState => ({\n        personalList : {\n          ...prevState.personalList,\n          [number] : {\n            ...prevState.personalList[number],\n            name: name,\n            completion: newItem.completion,\n            \n          }        \n        },\n        graphSeg: {\n            started: newGraph.started,\n            finish: newGraph.finish,\n            complete: newGraph.complete\n          }\n      }))\n    } else if(this.state.personalList[number].completion === 'complete') {\n        let newGraph = {\n           started: currentStart,\n           finish: currentFinish + 1,\n           complete: currentComplete - 1\n          }               \n        this.setState(prevState => ({\n        personalList : {\n          ...prevState.personalList,\n          [number] : {\n            ...prevState.personalList[number],\n            name: name,\n            completion: newItem.completion,\n            \n          }        \n        },\n        graphSeg: {\n            started: newGraph.started,\n            finish: newGraph.finish,\n            complete: newGraph.complete\n          }\n      }))\n    }  \n    fetch('http://localhost:3000/select', {\n            method: 'put',\n            headers: {'Content-Type': 'application/Json'},\n            body: JSON.stringify({\n                id: this.state.user.id,\n                name: name,\n                completion: newItem.completion\n            })\n        })\n        .then(res => res.json())\n    } else if (ver === 'three' && this.state.personalList[number].completion !== 'complete') {        \n      let newItem = {name: name,\n        completion: 'complete'} \n      if(this.state.personalList[number].completion === 'started') {\n        let newGraph = {\n           started: currentStart - 1,\n           finish: currentFinish,\n           complete: currentComplete + 1\n          }               \n        this.setState(prevState => ({\n        personalList : {\n          ...prevState.personalList,\n          [number] : {\n            ...prevState.personalList[number],\n            name: name,\n            completion: newItem.completion,\n            \n          }        \n        },\n        graphSeg: {\n            started: newGraph.started,\n            finish: newGraph.finish,\n            complete: newGraph.complete\n          }\n      }))\n    } else if(this.state.personalList[number].completion === 'finish') {\n        let newGraph = {\n           started: currentStart,\n           finish: currentFinish - 1,\n           complete: currentComplete + 1\n          }               \n        this.setState(prevState => ({\n        personalList : {\n          ...prevState.personalList,\n          [number] : {\n            ...prevState.personalList[number],\n            name: name,\n            completion: newItem.completion,\n            \n          }        \n        },\n        graphSeg: {\n            started: newGraph.started,\n            finish: newGraph.finish,\n            complete: newGraph.complete\n          }\n      }))\n    }  \n    fetch('http://localhost:3000/select', {\n            method: 'put',\n            headers: {'Content-Type': 'application/Json'},\n            body: JSON.stringify({\n                id: this.state.user.id,\n                name: name,\n                completion: newItem.completion\n            })\n        })\n        .then(res => res.json())\n    }    \n    // console.log(this.state)  \n  }\n  \n  itemDelete = (e) => {\n    let item = e.target.previousSibling.innerHTML\n    let log = this.state.log\n    let pers = this.state.personalList\n    let index = log.indexOf(item)\n\n    fetch('http://localhost:3000/log_delete', {\n      method: 'put',\n            headers: {'Content-Type': 'application/Json'},\n            body: JSON.stringify({\n                id: this.state.user.id,\n                name: item\n            })\n      })\n      .then(res => res.json())\n\n      fetch('http://localhost:3000/pers_delete', {\n      method: 'delete',\n            headers: {'Content-Type': 'application/Json'},\n            body: JSON.stringify({\n                id: this.state.user.id,\n                name: item\n            })\n      })\n      .then(res => res.json())\n\n    log.splice(log.indexOf(item), 1)\n    delete pers[index]\n    let newPers = {}\n    let count = 0\n    log.forEach(item => {\n      newPers[count] = {}\n      count++\n    })\n    count = 0\n    Object.keys(pers).forEach(item => {\n      newPers[count] = pers[item]\n      count++\n    })\n\n   this.setState({log: log})\n   this.setState({personalList: newPers})\n   console.log(this.state.log, this.state.personalList);\n  }\n\n  render() { \n    return (\n      <div className='container'>\n       <ParticlesBg  id='bg' type=\"cobweb\" color='#ffffff' bg={true}/>\n       <Nav signedIn={this.state.isSignedIn} onRouteChange={this.onRouteChange}/>\n       {this.state.route === 'home' ?\n          <div className='App'>         \n            <div className='left-cont'>\n              <Search onChange={this.onChange} onSearch={this.onSearch}  isThere={this.state.isThere}/>\n              <Main pers={this.state.personalList} onActive={this.onActive} log={this.state.log} itemDelete={this.itemDelete}/>\n            </div>          \n              <Graph graphSeg={this.state.graphSeg} log={this.state.log}/>              \n          </div> : (this.state.route === 'signin' ? \n          <SignIn loadUser={this.loadUser} loadPersonal={this.loadPersonal} onRouteChange={this.onRouteChange}/> :\n          <Register loadUser={this.loadUser} loadPersonal={this.loadPersonal} onRouteChange={this.onRouteChange}/>   \n          )\n       }\n        \n      </div>\n      \n\n    );\n  }\n}\n \nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}