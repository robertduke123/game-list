{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\robdu\\\\Desktop\\\\port\\\\game-list\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Search from './components/Search';\nimport Main from './components/Main';\nimport Graph from './components/Graph';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.onChange = e => {\n      this.setState({\n        search: e.target.value\n      });\n    };\n    this.onSearch = e => {\n      let item = this.state.search;\n      let itemSearch = this.state.search.replace(/\\s/g, '-').toLocaleLowerCase();\n      // item = item.replace(/\\s+/g, '-').toLowerCase()\n\n      fetch(`https://rawg-video-games-database.p.rapidapi.com/games/${itemSearch}?key=a8d817fa172443748735ff2d10862681`, {\n        method: 'GET',\n        headers: {\n          'X-RapidAPI-Key': '48bcd47c97msh29aeb9d40c8bed9p1b117bjsn539a69073325',\n          'X-RapidAPI-Host': 'rawg-video-games-database.p.rapidapi.com'\n        }\n      }).then(result => result.json()).then(data => {\n        this.setState({\n          game: data\n        });\n      });\n      console.log(this.state.game);\n      this.addGame();\n      // {\n      //   let arr = item.split(\" \")\n      //   for(let i =0; i < arr.length; i++) {\n      //     arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1)\n      //   }\n      //   let newItem = arr.join(' ')\n      //   let alt = data.alternative_names\n      //   let number = data.alternative_names.length\n      //   for(let i = 0; i < number; i++) {\n      //     if(alt[i] === newItem) {\n      //       console.log(true);\n      //     }\n      //   }\n      //   console.log(alt.length);\n      //   // if(alt.includes(newItem)) {\n      //   //   console.log(true);\n      //   // }\n      //   if(data.slug === itemSearch || \n      //   data.name === newItem \n      //   // alt.includes(newItem)\n      //   ) {\n      //   if( !this.state.log.includes(item)) {\n      //     if(this.state.search.length > 0) {\n      //       if(this.state.log.length > 0) {\n      //         this.setState(prevState => ({\n      //           log: [...prevState.log, item],\n      //           personalList: {...prevState.personalList,\n      //             [this.state.log.length] : {\n      //               name: item, \n      //               completion: 'started',\n      //               image: data.background_image\n      //             }},\n      //           graphSeg:{\n      //             started: prevState.graphSeg.started + 1,\n      //             finish: prevState.graphSeg.finish,\n      //             complete: prevState.graphSeg.complete\n      //           },\n      //           isThere: true\n      //         }))\n      //       } else {\n      //         this.setState({log: [item]})\n      //         this.setState({personalList: {0 : {\n      //           name: item, \n      //           completion: 'started',\n      //           image: data.background_image\n      //           }\n      //         }})\n      //         this.setState({graphSeg:{\n      //             started: 1,\n      //             finish: 0,\n      //             complete: 0\n      //           }})\n      //         this.setState({isThere: true})                \n      //     }      \n      //   }                \n      //   this.setState({search: ''})\n      //   document.querySelector('#search').value = ''  \n      //   console.log(this.state.personalList);              \n      // } \n      // } else {\n      //   console.log('n/a please try again');\n      //   this.setState(prevState => ({\n      //     ...prevState,\n      //     isThere: false\n      //   }))\n      // }})\n    };\n    this.addGame = () => {\n      let item = this.state.search;\n      let itemSearch = this.state.search.replace(/\\s/g, '-').toLocaleLowerCase();\n      let arr = item.split(\" \");\n      for (let i = 0; i < arr.length; i++) {\n        arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1);\n      }\n      let newItem = arr.join(' ');\n      let alt = this.state.game.alternative_names;\n      console.log(alt);\n      // if(alt.includes(newItem)) {\n      //   console.log(true);\n      // }\n      if (this.state.game.slug === itemSearch\n      // this.state.game.name === newItem \n      // alt.includes(newItem)\n      ) {\n        if (!this.state.log.includes(item)) {\n          if (this.state.search.length > 0) {\n            if (this.state.log.length > 0) {\n              this.setState(prevState => ({\n                log: [...prevState.log, item],\n                personalList: {\n                  ...prevState.personalList,\n                  [this.state.log.length]: {\n                    name: item,\n                    completion: 'started',\n                    image: this.state.game.background_image\n                  }\n                },\n                graphSeg: {\n                  started: prevState.graphSeg.started + 1,\n                  finish: prevState.graphSeg.finish,\n                  complete: prevState.graphSeg.complete\n                },\n                isThere: true\n              }));\n            } else {\n              this.setState({\n                log: [item]\n              });\n              this.setState({\n                personalList: {\n                  0: {\n                    name: item,\n                    completion: 'started',\n                    image: this.state.game.background_image\n                  }\n                }\n              });\n              this.setState({\n                graphSeg: {\n                  started: 1,\n                  finish: 0,\n                  complete: 0\n                }\n              });\n              this.setState({\n                isThere: true\n              });\n            }\n          }\n          this.setState({\n            search: ''\n          });\n          document.querySelector('#search').value = '';\n          console.log(this.state.personalList);\n        }\n      } else {\n        console.log('n/a please try again');\n        this.setState(prevState => ({\n          ...prevState,\n          isThere: false\n        }));\n      }\n    };\n    this.onActive = (e, ver) => {\n      let name = e.target.parentNode.previousSibling.innerText;\n      let number = this.state.log.indexOf(name);\n      let currentStart = this.state.graphSeg.started;\n      let currentFinish = this.state.graphSeg.finish;\n      let currentComplete = this.state.graphSeg.complete;\n      if (ver === 'one' && this.state.personalList[number].completion !== 'started') {\n        let newItem = {\n          name: name,\n          completion: 'started'\n        };\n        if (this.state.personalList[number].completion === '') {\n          let newGraph = {\n            started: currentStart + 1,\n            finish: currentFinish,\n            complete: currentComplete\n          };\n          this.setState(prevState => ({\n            personalList: {\n              ...prevState.personalList,\n              [number]: {\n                ...prevState.personalList[number],\n                name: name,\n                completion: newItem.completion\n              }\n            },\n            graphSeg: {\n              started: newGraph.started,\n              finish: newGraph.finish,\n              complete: newGraph.complete\n            }\n          }));\n        } else if (this.state.personalList[number].completion === 'finish') {\n          let newGraph = {\n            started: currentStart + 1,\n            finish: currentFinish - 1,\n            complete: currentComplete\n          };\n          this.setState(prevState => ({\n            personalList: {\n              ...prevState.personalList,\n              [number]: {\n                ...prevState.personalList[number],\n                name: name,\n                completion: newItem.completion\n              }\n            },\n            graphSeg: {\n              started: newGraph.started,\n              finish: newGraph.finish,\n              complete: newGraph.complete\n            }\n          }));\n        } else if (this.state.personalList[number].completion === 'complete') {\n          let newGraph = {\n            started: currentStart + 1,\n            finish: currentFinish,\n            complete: currentComplete - 1\n          };\n          this.setState(prevState => ({\n            personalList: {\n              ...prevState.personalList,\n              [number]: {\n                ...prevState.personalList[number],\n                name: name,\n                completion: newItem.completion\n              }\n            },\n            graphSeg: {\n              started: newGraph.started,\n              finish: newGraph.finish,\n              complete: newGraph.complete\n            }\n          }));\n        }\n      } else if (ver === 'two' && this.state.personalList[number].completion !== 'finish') {\n        let newItem = {\n          name: name,\n          completion: 'finish'\n        };\n        if (this.state.personalList[number].completion === '') {\n          let newGraph = {\n            started: currentStart,\n            finish: currentFinish + 1,\n            complete: currentComplete\n          };\n          this.setState(prevState => ({\n            personalList: {\n              ...prevState.personalList,\n              [number]: {\n                ...prevState.personalList[number],\n                name: name,\n                completion: newItem.completion\n              }\n            },\n            graphSeg: {\n              started: newGraph.started,\n              finish: newGraph.finish,\n              complete: newGraph.complete\n            }\n          }));\n        } else if (this.state.personalList[number].completion === 'started') {\n          let newGraph = {\n            started: currentStart - 1,\n            finish: currentFinish + 1,\n            complete: currentComplete\n          };\n          this.setState(prevState => ({\n            personalList: {\n              ...prevState.personalList,\n              [number]: {\n                ...prevState.personalList[number],\n                name: name,\n                completion: newItem.completion\n              }\n            },\n            graphSeg: {\n              started: newGraph.started,\n              finish: newGraph.finish,\n              complete: newGraph.complete\n            }\n          }));\n        } else if (this.state.personalList[number].completion === 'complete') {\n          let newGraph = {\n            started: currentStart,\n            finish: currentFinish + 1,\n            complete: currentComplete - 1\n          };\n          this.setState(prevState => ({\n            personalList: {\n              ...prevState.personalList,\n              [number]: {\n                ...prevState.personalList[number],\n                name: name,\n                completion: newItem.completion\n              }\n            },\n            graphSeg: {\n              started: newGraph.started,\n              finish: newGraph.finish,\n              complete: newGraph.complete\n            }\n          }));\n        }\n      } else if (ver === 'three' && this.state.personalList[number].completion !== 'complete') {\n        let newItem = {\n          name: name,\n          completion: 'complete'\n        };\n        if (this.state.personalList[number].completion === '') {\n          let newGraph = {\n            started: currentStart,\n            finish: currentFinish,\n            complete: currentComplete + 1\n          };\n          this.setState(prevState => ({\n            personalList: {\n              ...prevState.personalList,\n              [number]: {\n                ...prevState.personalList[number],\n                name: name,\n                completion: newItem.completion\n              }\n            },\n            graphSeg: {\n              started: newGraph.started,\n              finish: newGraph.finish,\n              complete: newGraph.complete\n            }\n          }));\n        } else if (this.state.personalList[number].completion === 'started') {\n          let newGraph = {\n            started: currentStart - 1,\n            finish: currentFinish,\n            complete: currentComplete + 1\n          };\n          this.setState(prevState => ({\n            personalList: {\n              ...prevState.personalList,\n              [number]: {\n                ...prevState.personalList[number],\n                name: name,\n                completion: newItem.completion\n              }\n            },\n            graphSeg: {\n              started: newGraph.started,\n              finish: newGraph.finish,\n              complete: newGraph.complete\n            }\n          }));\n        } else if (this.state.personalList[number].completion === 'finish') {\n          let newGraph = {\n            started: currentStart,\n            finish: currentFinish - 1,\n            complete: currentComplete + 1\n          };\n          this.setState(prevState => ({\n            personalList: {\n              ...prevState.personalList,\n              [number]: {\n                ...prevState.personalList[number],\n                name: name,\n                completion: newItem.completion\n              }\n            },\n            graphSeg: {\n              started: newGraph.started,\n              finish: newGraph.finish,\n              complete: newGraph.complete\n            }\n          }));\n        }\n      }\n    };\n    this.state = {\n      game: {},\n      authorization: '',\n      search: '',\n      log: [],\n      personalList: {},\n      graphSeg: {\n        started: 0,\n        finish: 0,\n        complete: 0\n      },\n      isThere: true\n    };\n  }\n  componentDidMount() {\n    fetch(`https://rawg-video-games-database.p.rapidapi.com/games?key=a8d817fa172443748735ff2d10862681`, {\n      method: 'GET',\n      headers: {\n        'X-RapidAPI-Key': '48bcd47c97msh29aeb9d40c8bed9p1b117bjsn539a69073325',\n        'X-RapidAPI-Host': 'rawg-video-games-database.p.rapidapi.com'\n      }\n    }).then(result => result.json()).then(data => {\n      this.setState({\n        game: data\n      });\n    });\n    console.log(this.state.game);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-cont\",\n        children: [/*#__PURE__*/_jsxDEV(Search, {\n          onChange: this.onChange,\n          onSearch: this.onSearch,\n          isThere: this.state.isThere\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Main, {\n          pers: this.state.personalList,\n          onActive: this.onActive,\n          createGraph: this.createGraph,\n          items: this.state.log\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-cont\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Graph, {\n        graphSeg: this.state.graphSeg,\n        log: this.state.log\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Search","Main","Graph","jsxDEV","_jsxDEV","App","constructor","onChange","e","setState","search","target","value","onSearch","item","state","itemSearch","replace","toLocaleLowerCase","fetch","method","headers","then","result","json","data","game","console","log","addGame","arr","split","i","length","charAt","toUpperCase","slice","newItem","join","alt","alternative_names","slug","includes","prevState","personalList","name","completion","image","background_image","graphSeg","started","finish","complete","isThere","document","querySelector","onActive","ver","parentNode","previousSibling","innerText","number","indexOf","currentStart","currentFinish","currentComplete","newGraph","authorization","componentDidMount","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","pers","createGraph","items"],"sources":["C:/Users/robdu/Desktop/port/game-list/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport Search from './components/Search';\nimport Main from './components/Main';\nimport Graph from './components/Graph';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\n\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = { \n    game: {},\n    authorization: '',\n    search: '',\n    log: [],\n    personalList: {},\n    graphSeg:{\n      started: 0,\n      finish: 0,\n      complete: 0\n    },\n    isThere: true\n   } \n  }\n\n\n  componentDidMount() {\n    fetch(`https://rawg-video-games-database.p.rapidapi.com/games?key=a8d817fa172443748735ff2d10862681`, {\n          method: 'GET',\n          headers: {\n            'X-RapidAPI-Key': '48bcd47c97msh29aeb9d40c8bed9p1b117bjsn539a69073325',\n            'X-RapidAPI-Host': 'rawg-video-games-database.p.rapidapi.com'            \n            }\n            })\n            .then(result => result.json())\n            .then(data => {\n              this.setState({game: data})\n            })\n            console.log(this.state.game);\n  }\n\n\n\n   onChange = (e) => {\n    this.setState({search: e.target.value})\n   }\n\n   onSearch = (e) => {\n      let item = this.state.search\n      let itemSearch = this.state.search.replace(/\\s/g, '-').toLocaleLowerCase()\n      // item = item.replace(/\\s+/g, '-').toLowerCase()\n\n        fetch(`https://rawg-video-games-database.p.rapidapi.com/games/${itemSearch}?key=a8d817fa172443748735ff2d10862681`, {\n          method: 'GET',\n          headers: {\n            'X-RapidAPI-Key': '48bcd47c97msh29aeb9d40c8bed9p1b117bjsn539a69073325',\n            'X-RapidAPI-Host': 'rawg-video-games-database.p.rapidapi.com'            \n            }\n            })\n            .then(result => result.json())\n            .then(data => {\n              this.setState({game: data})\n            })\n            console.log(this.state.game);\n\n            this.addGame()\n            // {\n            //   let arr = item.split(\" \")\n            //   for(let i =0; i < arr.length; i++) {\n            //     arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1)\n            //   }\n            //   let newItem = arr.join(' ')\n            //   let alt = data.alternative_names\n            //   let number = data.alternative_names.length\n            //   for(let i = 0; i < number; i++) {\n            //     if(alt[i] === newItem) {\n            //       console.log(true);\n            //     }\n            //   }\n            //   console.log(alt.length);\n            //   // if(alt.includes(newItem)) {\n            //   //   console.log(true);\n            //   // }\n            //   if(data.slug === itemSearch || \n            //   data.name === newItem \n            //   // alt.includes(newItem)\n            //   ) {\n            //   if( !this.state.log.includes(item)) {\n            //     if(this.state.search.length > 0) {\n            //       if(this.state.log.length > 0) {\n            //         this.setState(prevState => ({\n            //           log: [...prevState.log, item],\n            //           personalList: {...prevState.personalList,\n            //             [this.state.log.length] : {\n            //               name: item, \n            //               completion: 'started',\n            //               image: data.background_image\n            //             }},\n            //           graphSeg:{\n            //             started: prevState.graphSeg.started + 1,\n            //             finish: prevState.graphSeg.finish,\n            //             complete: prevState.graphSeg.complete\n            //           },\n            //           isThere: true\n            //         }))\n            //       } else {\n            //         this.setState({log: [item]})\n            //         this.setState({personalList: {0 : {\n            //           name: item, \n            //           completion: 'started',\n            //           image: data.background_image\n            //           }\n            //         }})\n            //         this.setState({graphSeg:{\n            //             started: 1,\n            //             finish: 0,\n            //             complete: 0\n            //           }})\n            //         this.setState({isThere: true})                \n            //     }      \n            //   }                \n            //   this.setState({search: ''})\n            //   document.querySelector('#search').value = ''  \n            //   console.log(this.state.personalList);              \n            // } \n            // } else {\n            //   console.log('n/a please try again');\n            //   this.setState(prevState => ({\n            //     ...prevState,\n            //     isThere: false\n            //   }))\n            // }})\n    }\n\n    addGame = () => {\n      let item = this.state.search\n      let itemSearch = this.state.search.replace(/\\s/g, '-').toLocaleLowerCase()\n      let arr = item.split(\" \")\n              for(let i =0; i < arr.length; i++) {\n                arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1)\n              }\n              let newItem = arr.join(' ')\n              let alt = this.state.game.alternative_names\n              \n              console.log(alt);\n              // if(alt.includes(newItem)) {\n              //   console.log(true);\n              // }\n              if(this.state.game.slug === itemSearch \n              // this.state.game.name === newItem \n              // alt.includes(newItem)\n              ) {\n              if( !this.state.log.includes(item)) {\n                if(this.state.search.length > 0) {\n                  if(this.state.log.length > 0) {\n                    this.setState(prevState => ({\n                      log: [...prevState.log, item],\n                      personalList: {...prevState.personalList,\n                        [this.state.log.length] : {\n                          name: item, \n                          completion: 'started',\n                          image: this.state.game.background_image\n                        }},\n                      graphSeg:{\n                        started: prevState.graphSeg.started + 1,\n                        finish: prevState.graphSeg.finish,\n                        complete: prevState.graphSeg.complete\n                      },\n                      isThere: true\n                    }))\n                  } else {\n                    this.setState({log: [item]})\n                    this.setState({personalList: {0 : {\n                      name: item, \n                      completion: 'started',\n                      image: this.state.game.background_image\n                      }\n                    }})\n                    this.setState({graphSeg:{\n                        started: 1,\n                        finish: 0,\n                        complete: 0\n                      }})\n                    this.setState({isThere: true})                \n                }      \n              }                \n              this.setState({search: ''})\n              document.querySelector('#search').value = ''  \n              console.log(this.state.personalList);              \n            } \n            } else {\n              console.log('n/a please try again');\n              this.setState(prevState => ({\n                ...prevState,\n                isThere: false\n              }))\n            }\n    }\n  \n    onActive = (e, ver) => {\n    let name = e.target.parentNode.previousSibling.innerText\n    let number = this.state.log.indexOf(name)\n    let currentStart = this.state.graphSeg.started\n    let currentFinish = this.state.graphSeg.finish\n    let currentComplete = this.state.graphSeg.complete    \n    \n    if(ver === 'one' && this.state.personalList[number].completion !== 'started') { \n      let newItem = {name: name,\n        completion: 'started'} \n      if(this.state.personalList[number].completion === '') {\n        let newGraph = {\n           started: currentStart + 1,\n           finish: currentFinish,\n           complete: currentComplete\n          }               \n        this.setState(prevState => ({\n        personalList : {\n          ...prevState.personalList,\n          [number] : {\n            ...prevState.personalList[number],\n            name: name,\n            completion: newItem.completion,\n            \n          }        \n        },\n        graphSeg: {\n            started: newGraph.started,\n            finish: newGraph.finish,\n            complete: newGraph.complete\n          }\n      }))\n    } else if(this.state.personalList[number].completion === 'finish') {\n        let newGraph = {\n           started: currentStart + 1,\n           finish: currentFinish - 1,\n           complete: currentComplete\n          }               \n        this.setState(prevState => ({\n        personalList : {\n          ...prevState.personalList,\n          [number] : {\n            ...prevState.personalList[number],\n            name: name,\n            completion: newItem.completion,\n            \n          }        \n        },\n        graphSeg: {\n            started: newGraph.started,\n            finish: newGraph.finish,\n            complete: newGraph.complete\n          }\n      }))\n    } else if(this.state.personalList[number].completion === 'complete') {\n        let newGraph = {\n           started: currentStart + 1,\n           finish: currentFinish,\n           complete: currentComplete - 1\n          }               \n        this.setState(prevState => ({\n        personalList : {\n          ...prevState.personalList,\n          [number] : {\n            ...prevState.personalList[number],\n            name: name,\n            completion: newItem.completion,\n            \n          }        \n        },\n        graphSeg: {\n            started: newGraph.started,\n            finish: newGraph.finish,\n            complete: newGraph.complete\n          }\n      }))\n    }       \n    } else if (ver === 'two' && this.state.personalList[number].completion !== 'finish') {      \n      let newItem = {name: name,\n        completion: 'finish'} \n      if(this.state.personalList[number].completion === '') {\n        let newGraph = {\n           started: currentStart,\n           finish: currentFinish + 1,\n           complete: currentComplete\n          }               \n        this.setState(prevState => ({\n        personalList : {\n          ...prevState.personalList,\n          [number] : {\n            ...prevState.personalList[number],\n            name: name,\n            completion: newItem.completion,\n            \n          }        \n        },\n        graphSeg: {\n            started: newGraph.started,\n            finish: newGraph.finish,\n            complete: newGraph.complete\n          }\n      }))\n    } else if(this.state.personalList[number].completion === 'started') {\n        let newGraph = {\n           started: currentStart - 1,\n           finish: currentFinish + 1,\n           complete: currentComplete\n          }               \n        this.setState(prevState => ({\n        personalList : {\n          ...prevState.personalList,\n          [number] : {\n            ...prevState.personalList[number],\n            name: name,\n            completion: newItem.completion,\n            \n          }        \n        },\n        graphSeg: {\n            started: newGraph.started,\n            finish: newGraph.finish,\n            complete: newGraph.complete\n          }\n      }))\n    } else if(this.state.personalList[number].completion === 'complete') {\n        let newGraph = {\n           started: currentStart,\n           finish: currentFinish + 1,\n           complete: currentComplete - 1\n          }               \n        this.setState(prevState => ({\n        personalList : {\n          ...prevState.personalList,\n          [number] : {\n            ...prevState.personalList[number],\n            name: name,\n            completion: newItem.completion,\n            \n          }        \n        },\n        graphSeg: {\n            started: newGraph.started,\n            finish: newGraph.finish,\n            complete: newGraph.complete\n          }\n      }))\n    }  \n    } else if (ver === 'three' && this.state.personalList[number].completion !== 'complete') {        \n      let newItem = {name: name,\n        completion: 'complete'} \n      if(this.state.personalList[number].completion === '') {\n        let newGraph = {\n           started: currentStart,\n           finish: currentFinish,\n           complete: currentComplete + 1\n          }               \n        this.setState(prevState => ({\n        personalList : {\n          ...prevState.personalList,\n          [number] : {\n            ...prevState.personalList[number],\n            name: name,\n            completion: newItem.completion,\n            \n          }        \n        },\n        graphSeg: {\n            started: newGraph.started,\n            finish: newGraph.finish,\n            complete: newGraph.complete\n          }\n      }))\n    } else if(this.state.personalList[number].completion === 'started') {\n        let newGraph = {\n           started: currentStart - 1,\n           finish: currentFinish,\n           complete: currentComplete + 1\n          }               \n        this.setState(prevState => ({\n        personalList : {\n          ...prevState.personalList,\n          [number] : {\n            ...prevState.personalList[number],\n            name: name,\n            completion: newItem.completion,\n            \n          }        \n        },\n        graphSeg: {\n            started: newGraph.started,\n            finish: newGraph.finish,\n            complete: newGraph.complete\n          }\n      }))\n    } else if(this.state.personalList[number].completion === 'finish') {\n        let newGraph = {\n           started: currentStart,\n           finish: currentFinish - 1,\n           complete: currentComplete + 1\n          }               \n        this.setState(prevState => ({\n        personalList : {\n          ...prevState.personalList,\n          [number] : {\n            ...prevState.personalList[number],\n            name: name,\n            completion: newItem.completion,\n            \n          }        \n        },\n        graphSeg: {\n            started: newGraph.started,\n            finish: newGraph.finish,\n            complete: newGraph.complete\n          }\n      }))\n    }  \n    }      \n  }\n\n  render() { \n    return (\n      <div className='App'>\n        \n        <div className='left-cont'>\n          <Search onChange={this.onChange} onSearch={this.onSearch}  isThere={this.state.isThere}/>\n          <Main pers={this.state.personalList} onActive={this.onActive} createGraph={this.createGraph} items={this.state.log}/>\n        </div>\n        <div className='right-cont'></div>\n        <Graph graphSeg={this.state.graphSeg} log={this.state.log}/>\n      </div>\n\n    );\n  }\n}\n \nexport default App;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,IAAI,MAAM,mBAAmB;AACpC,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAO,kCAAkC;AACzC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAInB,MAAMC,GAAG,SAASN,SAAS,CAAC;EAC1BO,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;IAAA,KAkCRC,QAAQ,GAAIC,CAAC,IAAK;MACjB,IAAI,CAACC,QAAQ,CAAC;QAACC,MAAM,EAAEF,CAAC,CAACG,MAAM,CAACC;MAAK,CAAC,CAAC;IACxC,CAAC;IAAA,KAEDC,QAAQ,GAAIL,CAAC,IAAK;MACf,IAAIM,IAAI,GAAG,IAAI,CAACC,KAAK,CAACL,MAAM;MAC5B,IAAIM,UAAU,GAAG,IAAI,CAACD,KAAK,CAACL,MAAM,CAACO,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAACC,iBAAiB,CAAC,CAAC;MAC1E;;MAEEC,KAAK,CAAE,0DAAyDH,UAAW,uCAAsC,EAAE;QACjHI,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,gBAAgB,EAAE,oDAAoD;UACtE,iBAAiB,EAAE;QACnB;MACA,CAAC,CAAC,CACDC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC,CAC7BF,IAAI,CAACG,IAAI,IAAI;QACZ,IAAI,CAAChB,QAAQ,CAAC;UAACiB,IAAI,EAAED;QAAI,CAAC,CAAC;MAC7B,CAAC,CAAC;MACFE,OAAO,CAACC,GAAG,CAAC,IAAI,CAACb,KAAK,CAACW,IAAI,CAAC;MAE5B,IAAI,CAACG,OAAO,CAAC,CAAC;MACd;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACR,CAAC;IAAA,KAEDA,OAAO,GAAG,MAAM;MACd,IAAIf,IAAI,GAAG,IAAI,CAACC,KAAK,CAACL,MAAM;MAC5B,IAAIM,UAAU,GAAG,IAAI,CAACD,KAAK,CAACL,MAAM,CAACO,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAACC,iBAAiB,CAAC,CAAC;MAC1E,IAAIY,GAAG,GAAGhB,IAAI,CAACiB,KAAK,CAAC,GAAG,CAAC;MACjB,KAAI,IAAIC,CAAC,GAAE,CAAC,EAAEA,CAAC,GAAGF,GAAG,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;QACjCF,GAAG,CAACE,CAAC,CAAC,GAAGF,GAAG,CAACE,CAAC,CAAC,CAACE,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGL,GAAG,CAACE,CAAC,CAAC,CAACI,KAAK,CAAC,CAAC,CAAC;MAC3D;MACA,IAAIC,OAAO,GAAGP,GAAG,CAACQ,IAAI,CAAC,GAAG,CAAC;MAC3B,IAAIC,GAAG,GAAG,IAAI,CAACxB,KAAK,CAACW,IAAI,CAACc,iBAAiB;MAE3Cb,OAAO,CAACC,GAAG,CAACW,GAAG,CAAC;MAChB;MACA;MACA;MACA,IAAG,IAAI,CAACxB,KAAK,CAACW,IAAI,CAACe,IAAI,KAAKzB;MAC5B;MACA;MAAA,EACE;QACF,IAAI,CAAC,IAAI,CAACD,KAAK,CAACa,GAAG,CAACc,QAAQ,CAAC5B,IAAI,CAAC,EAAE;UAClC,IAAG,IAAI,CAACC,KAAK,CAACL,MAAM,CAACuB,MAAM,GAAG,CAAC,EAAE;YAC/B,IAAG,IAAI,CAAClB,KAAK,CAACa,GAAG,CAACK,MAAM,GAAG,CAAC,EAAE;cAC5B,IAAI,CAACxB,QAAQ,CAACkC,SAAS,KAAK;gBAC1Bf,GAAG,EAAE,CAAC,GAAGe,SAAS,CAACf,GAAG,EAAEd,IAAI,CAAC;gBAC7B8B,YAAY,EAAE;kBAAC,GAAGD,SAAS,CAACC,YAAY;kBACtC,CAAC,IAAI,CAAC7B,KAAK,CAACa,GAAG,CAACK,MAAM,GAAI;oBACxBY,IAAI,EAAE/B,IAAI;oBACVgC,UAAU,EAAE,SAAS;oBACrBC,KAAK,EAAE,IAAI,CAAChC,KAAK,CAACW,IAAI,CAACsB;kBACzB;gBAAC,CAAC;gBACJC,QAAQ,EAAC;kBACPC,OAAO,EAAEP,SAAS,CAACM,QAAQ,CAACC,OAAO,GAAG,CAAC;kBACvCC,MAAM,EAAER,SAAS,CAACM,QAAQ,CAACE,MAAM;kBACjCC,QAAQ,EAAET,SAAS,CAACM,QAAQ,CAACG;gBAC/B,CAAC;gBACDC,OAAO,EAAE;cACX,CAAC,CAAC,CAAC;YACL,CAAC,MAAM;cACL,IAAI,CAAC5C,QAAQ,CAAC;gBAACmB,GAAG,EAAE,CAACd,IAAI;cAAC,CAAC,CAAC;cAC5B,IAAI,CAACL,QAAQ,CAAC;gBAACmC,YAAY,EAAE;kBAAC,CAAC,EAAG;oBAChCC,IAAI,EAAE/B,IAAI;oBACVgC,UAAU,EAAE,SAAS;oBACrBC,KAAK,EAAE,IAAI,CAAChC,KAAK,CAACW,IAAI,CAACsB;kBACvB;gBACF;cAAC,CAAC,CAAC;cACH,IAAI,CAACvC,QAAQ,CAAC;gBAACwC,QAAQ,EAAC;kBACpBC,OAAO,EAAE,CAAC;kBACVC,MAAM,EAAE,CAAC;kBACTC,QAAQ,EAAE;gBACZ;cAAC,CAAC,CAAC;cACL,IAAI,CAAC3C,QAAQ,CAAC;gBAAC4C,OAAO,EAAE;cAAI,CAAC,CAAC;YAClC;UACF;UACA,IAAI,CAAC5C,QAAQ,CAAC;YAACC,MAAM,EAAE;UAAE,CAAC,CAAC;UAC3B4C,QAAQ,CAACC,aAAa,CAAC,SAAS,CAAC,CAAC3C,KAAK,GAAG,EAAE;UAC5Ce,OAAO,CAACC,GAAG,CAAC,IAAI,CAACb,KAAK,CAAC6B,YAAY,CAAC;QACtC;MACA,CAAC,MAAM;QACLjB,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;QACnC,IAAI,CAACnB,QAAQ,CAACkC,SAAS,KAAK;UAC1B,GAAGA,SAAS;UACZU,OAAO,EAAE;QACX,CAAC,CAAC,CAAC;MACL;IACR,CAAC;IAAA,KAEDG,QAAQ,GAAG,CAAChD,CAAC,EAAEiD,GAAG,KAAK;MACvB,IAAIZ,IAAI,GAAGrC,CAAC,CAACG,MAAM,CAAC+C,UAAU,CAACC,eAAe,CAACC,SAAS;MACxD,IAAIC,MAAM,GAAG,IAAI,CAAC9C,KAAK,CAACa,GAAG,CAACkC,OAAO,CAACjB,IAAI,CAAC;MACzC,IAAIkB,YAAY,GAAG,IAAI,CAAChD,KAAK,CAACkC,QAAQ,CAACC,OAAO;MAC9C,IAAIc,aAAa,GAAG,IAAI,CAACjD,KAAK,CAACkC,QAAQ,CAACE,MAAM;MAC9C,IAAIc,eAAe,GAAG,IAAI,CAAClD,KAAK,CAACkC,QAAQ,CAACG,QAAQ;MAElD,IAAGK,GAAG,KAAK,KAAK,IAAI,IAAI,CAAC1C,KAAK,CAAC6B,YAAY,CAACiB,MAAM,CAAC,CAACf,UAAU,KAAK,SAAS,EAAE;QAC5E,IAAIT,OAAO,GAAG;UAACQ,IAAI,EAAEA,IAAI;UACvBC,UAAU,EAAE;QAAS,CAAC;QACxB,IAAG,IAAI,CAAC/B,KAAK,CAAC6B,YAAY,CAACiB,MAAM,CAAC,CAACf,UAAU,KAAK,EAAE,EAAE;UACpD,IAAIoB,QAAQ,GAAG;YACZhB,OAAO,EAAEa,YAAY,GAAG,CAAC;YACzBZ,MAAM,EAAEa,aAAa;YACrBZ,QAAQ,EAAEa;UACX,CAAC;UACH,IAAI,CAACxD,QAAQ,CAACkC,SAAS,KAAK;YAC5BC,YAAY,EAAG;cACb,GAAGD,SAAS,CAACC,YAAY;cACzB,CAACiB,MAAM,GAAI;gBACT,GAAGlB,SAAS,CAACC,YAAY,CAACiB,MAAM,CAAC;gBACjChB,IAAI,EAAEA,IAAI;gBACVC,UAAU,EAAET,OAAO,CAACS;cAEtB;YACF,CAAC;YACDG,QAAQ,EAAE;cACNC,OAAO,EAAEgB,QAAQ,CAAChB,OAAO;cACzBC,MAAM,EAAEe,QAAQ,CAACf,MAAM;cACvBC,QAAQ,EAAEc,QAAQ,CAACd;YACrB;UACJ,CAAC,CAAC,CAAC;QACL,CAAC,MAAM,IAAG,IAAI,CAACrC,KAAK,CAAC6B,YAAY,CAACiB,MAAM,CAAC,CAACf,UAAU,KAAK,QAAQ,EAAE;UAC/D,IAAIoB,QAAQ,GAAG;YACZhB,OAAO,EAAEa,YAAY,GAAG,CAAC;YACzBZ,MAAM,EAAEa,aAAa,GAAG,CAAC;YACzBZ,QAAQ,EAAEa;UACX,CAAC;UACH,IAAI,CAACxD,QAAQ,CAACkC,SAAS,KAAK;YAC5BC,YAAY,EAAG;cACb,GAAGD,SAAS,CAACC,YAAY;cACzB,CAACiB,MAAM,GAAI;gBACT,GAAGlB,SAAS,CAACC,YAAY,CAACiB,MAAM,CAAC;gBACjChB,IAAI,EAAEA,IAAI;gBACVC,UAAU,EAAET,OAAO,CAACS;cAEtB;YACF,CAAC;YACDG,QAAQ,EAAE;cACNC,OAAO,EAAEgB,QAAQ,CAAChB,OAAO;cACzBC,MAAM,EAAEe,QAAQ,CAACf,MAAM;cACvBC,QAAQ,EAAEc,QAAQ,CAACd;YACrB;UACJ,CAAC,CAAC,CAAC;QACL,CAAC,MAAM,IAAG,IAAI,CAACrC,KAAK,CAAC6B,YAAY,CAACiB,MAAM,CAAC,CAACf,UAAU,KAAK,UAAU,EAAE;UACjE,IAAIoB,QAAQ,GAAG;YACZhB,OAAO,EAAEa,YAAY,GAAG,CAAC;YACzBZ,MAAM,EAAEa,aAAa;YACrBZ,QAAQ,EAAEa,eAAe,GAAG;UAC7B,CAAC;UACH,IAAI,CAACxD,QAAQ,CAACkC,SAAS,KAAK;YAC5BC,YAAY,EAAG;cACb,GAAGD,SAAS,CAACC,YAAY;cACzB,CAACiB,MAAM,GAAI;gBACT,GAAGlB,SAAS,CAACC,YAAY,CAACiB,MAAM,CAAC;gBACjChB,IAAI,EAAEA,IAAI;gBACVC,UAAU,EAAET,OAAO,CAACS;cAEtB;YACF,CAAC;YACDG,QAAQ,EAAE;cACNC,OAAO,EAAEgB,QAAQ,CAAChB,OAAO;cACzBC,MAAM,EAAEe,QAAQ,CAACf,MAAM;cACvBC,QAAQ,EAAEc,QAAQ,CAACd;YACrB;UACJ,CAAC,CAAC,CAAC;QACL;MACA,CAAC,MAAM,IAAIK,GAAG,KAAK,KAAK,IAAI,IAAI,CAAC1C,KAAK,CAAC6B,YAAY,CAACiB,MAAM,CAAC,CAACf,UAAU,KAAK,QAAQ,EAAE;QACnF,IAAIT,OAAO,GAAG;UAACQ,IAAI,EAAEA,IAAI;UACvBC,UAAU,EAAE;QAAQ,CAAC;QACvB,IAAG,IAAI,CAAC/B,KAAK,CAAC6B,YAAY,CAACiB,MAAM,CAAC,CAACf,UAAU,KAAK,EAAE,EAAE;UACpD,IAAIoB,QAAQ,GAAG;YACZhB,OAAO,EAAEa,YAAY;YACrBZ,MAAM,EAAEa,aAAa,GAAG,CAAC;YACzBZ,QAAQ,EAAEa;UACX,CAAC;UACH,IAAI,CAACxD,QAAQ,CAACkC,SAAS,KAAK;YAC5BC,YAAY,EAAG;cACb,GAAGD,SAAS,CAACC,YAAY;cACzB,CAACiB,MAAM,GAAI;gBACT,GAAGlB,SAAS,CAACC,YAAY,CAACiB,MAAM,CAAC;gBACjChB,IAAI,EAAEA,IAAI;gBACVC,UAAU,EAAET,OAAO,CAACS;cAEtB;YACF,CAAC;YACDG,QAAQ,EAAE;cACNC,OAAO,EAAEgB,QAAQ,CAAChB,OAAO;cACzBC,MAAM,EAAEe,QAAQ,CAACf,MAAM;cACvBC,QAAQ,EAAEc,QAAQ,CAACd;YACrB;UACJ,CAAC,CAAC,CAAC;QACL,CAAC,MAAM,IAAG,IAAI,CAACrC,KAAK,CAAC6B,YAAY,CAACiB,MAAM,CAAC,CAACf,UAAU,KAAK,SAAS,EAAE;UAChE,IAAIoB,QAAQ,GAAG;YACZhB,OAAO,EAAEa,YAAY,GAAG,CAAC;YACzBZ,MAAM,EAAEa,aAAa,GAAG,CAAC;YACzBZ,QAAQ,EAAEa;UACX,CAAC;UACH,IAAI,CAACxD,QAAQ,CAACkC,SAAS,KAAK;YAC5BC,YAAY,EAAG;cACb,GAAGD,SAAS,CAACC,YAAY;cACzB,CAACiB,MAAM,GAAI;gBACT,GAAGlB,SAAS,CAACC,YAAY,CAACiB,MAAM,CAAC;gBACjChB,IAAI,EAAEA,IAAI;gBACVC,UAAU,EAAET,OAAO,CAACS;cAEtB;YACF,CAAC;YACDG,QAAQ,EAAE;cACNC,OAAO,EAAEgB,QAAQ,CAAChB,OAAO;cACzBC,MAAM,EAAEe,QAAQ,CAACf,MAAM;cACvBC,QAAQ,EAAEc,QAAQ,CAACd;YACrB;UACJ,CAAC,CAAC,CAAC;QACL,CAAC,MAAM,IAAG,IAAI,CAACrC,KAAK,CAAC6B,YAAY,CAACiB,MAAM,CAAC,CAACf,UAAU,KAAK,UAAU,EAAE;UACjE,IAAIoB,QAAQ,GAAG;YACZhB,OAAO,EAAEa,YAAY;YACrBZ,MAAM,EAAEa,aAAa,GAAG,CAAC;YACzBZ,QAAQ,EAAEa,eAAe,GAAG;UAC7B,CAAC;UACH,IAAI,CAACxD,QAAQ,CAACkC,SAAS,KAAK;YAC5BC,YAAY,EAAG;cACb,GAAGD,SAAS,CAACC,YAAY;cACzB,CAACiB,MAAM,GAAI;gBACT,GAAGlB,SAAS,CAACC,YAAY,CAACiB,MAAM,CAAC;gBACjChB,IAAI,EAAEA,IAAI;gBACVC,UAAU,EAAET,OAAO,CAACS;cAEtB;YACF,CAAC;YACDG,QAAQ,EAAE;cACNC,OAAO,EAAEgB,QAAQ,CAAChB,OAAO;cACzBC,MAAM,EAAEe,QAAQ,CAACf,MAAM;cACvBC,QAAQ,EAAEc,QAAQ,CAACd;YACrB;UACJ,CAAC,CAAC,CAAC;QACL;MACA,CAAC,MAAM,IAAIK,GAAG,KAAK,OAAO,IAAI,IAAI,CAAC1C,KAAK,CAAC6B,YAAY,CAACiB,MAAM,CAAC,CAACf,UAAU,KAAK,UAAU,EAAE;QACvF,IAAIT,OAAO,GAAG;UAACQ,IAAI,EAAEA,IAAI;UACvBC,UAAU,EAAE;QAAU,CAAC;QACzB,IAAG,IAAI,CAAC/B,KAAK,CAAC6B,YAAY,CAACiB,MAAM,CAAC,CAACf,UAAU,KAAK,EAAE,EAAE;UACpD,IAAIoB,QAAQ,GAAG;YACZhB,OAAO,EAAEa,YAAY;YACrBZ,MAAM,EAAEa,aAAa;YACrBZ,QAAQ,EAAEa,eAAe,GAAG;UAC7B,CAAC;UACH,IAAI,CAACxD,QAAQ,CAACkC,SAAS,KAAK;YAC5BC,YAAY,EAAG;cACb,GAAGD,SAAS,CAACC,YAAY;cACzB,CAACiB,MAAM,GAAI;gBACT,GAAGlB,SAAS,CAACC,YAAY,CAACiB,MAAM,CAAC;gBACjChB,IAAI,EAAEA,IAAI;gBACVC,UAAU,EAAET,OAAO,CAACS;cAEtB;YACF,CAAC;YACDG,QAAQ,EAAE;cACNC,OAAO,EAAEgB,QAAQ,CAAChB,OAAO;cACzBC,MAAM,EAAEe,QAAQ,CAACf,MAAM;cACvBC,QAAQ,EAAEc,QAAQ,CAACd;YACrB;UACJ,CAAC,CAAC,CAAC;QACL,CAAC,MAAM,IAAG,IAAI,CAACrC,KAAK,CAAC6B,YAAY,CAACiB,MAAM,CAAC,CAACf,UAAU,KAAK,SAAS,EAAE;UAChE,IAAIoB,QAAQ,GAAG;YACZhB,OAAO,EAAEa,YAAY,GAAG,CAAC;YACzBZ,MAAM,EAAEa,aAAa;YACrBZ,QAAQ,EAAEa,eAAe,GAAG;UAC7B,CAAC;UACH,IAAI,CAACxD,QAAQ,CAACkC,SAAS,KAAK;YAC5BC,YAAY,EAAG;cACb,GAAGD,SAAS,CAACC,YAAY;cACzB,CAACiB,MAAM,GAAI;gBACT,GAAGlB,SAAS,CAACC,YAAY,CAACiB,MAAM,CAAC;gBACjChB,IAAI,EAAEA,IAAI;gBACVC,UAAU,EAAET,OAAO,CAACS;cAEtB;YACF,CAAC;YACDG,QAAQ,EAAE;cACNC,OAAO,EAAEgB,QAAQ,CAAChB,OAAO;cACzBC,MAAM,EAAEe,QAAQ,CAACf,MAAM;cACvBC,QAAQ,EAAEc,QAAQ,CAACd;YACrB;UACJ,CAAC,CAAC,CAAC;QACL,CAAC,MAAM,IAAG,IAAI,CAACrC,KAAK,CAAC6B,YAAY,CAACiB,MAAM,CAAC,CAACf,UAAU,KAAK,QAAQ,EAAE;UAC/D,IAAIoB,QAAQ,GAAG;YACZhB,OAAO,EAAEa,YAAY;YACrBZ,MAAM,EAAEa,aAAa,GAAG,CAAC;YACzBZ,QAAQ,EAAEa,eAAe,GAAG;UAC7B,CAAC;UACH,IAAI,CAACxD,QAAQ,CAACkC,SAAS,KAAK;YAC5BC,YAAY,EAAG;cACb,GAAGD,SAAS,CAACC,YAAY;cACzB,CAACiB,MAAM,GAAI;gBACT,GAAGlB,SAAS,CAACC,YAAY,CAACiB,MAAM,CAAC;gBACjChB,IAAI,EAAEA,IAAI;gBACVC,UAAU,EAAET,OAAO,CAACS;cAEtB;YACF,CAAC;YACDG,QAAQ,EAAE;cACNC,OAAO,EAAEgB,QAAQ,CAAChB,OAAO;cACzBC,MAAM,EAAEe,QAAQ,CAACf,MAAM;cACvBC,QAAQ,EAAEc,QAAQ,CAACd;YACrB;UACJ,CAAC,CAAC,CAAC;QACL;MACA;IACF,CAAC;IAvZC,IAAI,CAACrC,KAAK,GAAG;MACbW,IAAI,EAAE,CAAC,CAAC;MACRyC,aAAa,EAAE,EAAE;MACjBzD,MAAM,EAAE,EAAE;MACVkB,GAAG,EAAE,EAAE;MACPgB,YAAY,EAAE,CAAC,CAAC;MAChBK,QAAQ,EAAC;QACPC,OAAO,EAAE,CAAC;QACVC,MAAM,EAAE,CAAC;QACTC,QAAQ,EAAE;MACZ,CAAC;MACDC,OAAO,EAAE;IACV,CAAC;EACF;EAGAe,iBAAiBA,CAAA,EAAG;IAClBjD,KAAK,CAAE,6FAA4F,EAAE;MAC/FC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,gBAAgB,EAAE,oDAAoD;QACtE,iBAAiB,EAAE;MACnB;IACA,CAAC,CAAC,CACDC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC,CAC7BF,IAAI,CAACG,IAAI,IAAI;MACZ,IAAI,CAAChB,QAAQ,CAAC;QAACiB,IAAI,EAAED;MAAI,CAAC,CAAC;IAC7B,CAAC,CAAC;IACFE,OAAO,CAACC,GAAG,CAAC,IAAI,CAACb,KAAK,CAACW,IAAI,CAAC;EACtC;EA4XA2C,MAAMA,CAAA,EAAG;IACP,oBACEjE,OAAA;MAAKkE,SAAS,EAAC,KAAK;MAAAC,QAAA,gBAElBnE,OAAA;QAAKkE,SAAS,EAAC,WAAW;QAAAC,QAAA,gBACxBnE,OAAA,CAACJ,MAAM;UAACO,QAAQ,EAAE,IAAI,CAACA,QAAS;UAACM,QAAQ,EAAE,IAAI,CAACA,QAAS;UAAEwC,OAAO,EAAE,IAAI,CAACtC,KAAK,CAACsC;QAAQ;UAAAmB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eACzFvE,OAAA,CAACH,IAAI;UAAC2E,IAAI,EAAE,IAAI,CAAC7D,KAAK,CAAC6B,YAAa;UAACY,QAAQ,EAAE,IAAI,CAACA,QAAS;UAACqB,WAAW,EAAE,IAAI,CAACA,WAAY;UAACC,KAAK,EAAE,IAAI,CAAC/D,KAAK,CAACa;QAAI;UAAA4C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClH,CAAC,eACNvE,OAAA;QAAKkE,SAAS,EAAC;MAAY;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAClCvE,OAAA,CAACF,KAAK;QAAC+C,QAAQ,EAAE,IAAI,CAAClC,KAAK,CAACkC,QAAS;QAACrB,GAAG,EAAE,IAAI,CAACb,KAAK,CAACa;MAAI;QAAA4C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzD,CAAC;EAGV;AACF;AAEA,eAAetE,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}